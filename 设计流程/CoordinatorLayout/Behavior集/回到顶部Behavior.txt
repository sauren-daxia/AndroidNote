public class ToTopBehavior extends FloatingActionButton.Behavior {
    private boolean isAnimatingOut = false;

    public ToTopBehavior(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    @Override
    public boolean onStartNestedScroll(@NonNull CoordinatorLayout coordinatorLayout, @NonNull FloatingActionButton child, @NonNull View directTargetChild, @NonNull View target, int axes) {
        return axes == ViewCompat.SCROLL_AXIS_VERTICAL;
    }


    @Override
    public void onNestedScroll(@NonNull CoordinatorLayout coordinatorLayout, @NonNull FloatingActionButton child, @NonNull View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type) {

        if (dyConsumed > 0 && dyUnconsumed == 0) {
            //上滑中。。。
        }
        if (dyConsumed == 0 && dyUnconsumed > 0) {
            //到边界了还在上滑。。。
        }
        if (dyConsumed < 0 && dyUnconsumed == 0) {
            //下滑中。。。
        }
        if (dyConsumed == 0 && dyUnconsumed < 0) {
            //到边界了，还在下滑。。。
        }

        if (((dyConsumed > 0 && dyUnconsumed == 0) || (dyConsumed == 0 && dyUnconsumed > 0))
                && child.getVisibility() != View.VISIBLE) {// 显示
            scaleShow(child, null);
        }

        if (((dyConsumed < 0 && dyUnconsumed == 0) || (dyConsumed == 0 && dyUnconsumed < 0))
                && child.getVisibility() != View.INVISIBLE && !isAnimatingOut) {
            scaleHide(child, viewPropertyAnimatorListener);
        }

        Log.d("CHEN", "onNestedScroll: dxConsumed --- "+dxConsumed+"\n");
        Log.d("CHEN", "onNestedScroll: dyConsumed --- "+dyConsumed+"\n");
        Log.d("CHEN", "onNestedScroll: dxUnconsumed --- "+dxUnconsumed+"\n");
        Log.d("CHEN", "onNestedScroll: dyUnconsumed --- "+dyUnconsumed+"\n");
    }


    ViewPropertyAnimatorListener viewPropertyAnimatorListener = new ViewPropertyAnimatorListener() {

        @Override
        public void onAnimationStart(View view) {
            isAnimatingOut = true;
        }

        @Override
        public void onAnimationEnd(View view) {
            isAnimatingOut = false;
            view.setVisibility(View.INVISIBLE);
        }

        @Override
        public void onAnimationCancel(View arg0) {
            isAnimatingOut = false;
        }
    };

    public static void scaleShow(View view, ViewPropertyAnimatorListener viewPropertyAnimatorListener) {
        view.setVisibility(View.VISIBLE);
        ViewCompat.animate(view)
                .scaleX(1.0f)
                .scaleY(1.0f)
                .alpha(1.0f)
                .setDuration(800)
                .setListener(viewPropertyAnimatorListener)
                .setInterpolator(new FastOutSlowInInterpolator())
                .start();
    }

    public static void scaleHide(View view, ViewPropertyAnimatorListener viewPropertyAnimatorListener) {
        ViewCompat.animate(view)
                .scaleX(0.0f)
                .scaleY(0.0f)
                .alpha(0.0f)
                .setDuration(800)
                .setInterpolator(new FastOutSlowInInterpolator())
                .setListener(viewPropertyAnimatorListener)
                .start();
    }
}
