一、自定义view
1、继承一个View，自定义这个View用于点击录音

2、在构造自定义View的时候获取录音管理类，并将路径传过去

3、设置录音管理类的监听,监听录音管理类是否start录音了

4、设置长按监听，当长按的时候开启录音,并修改变量表示已经触发长按

5、当收到长按的回调的时候发送handler，处理以下事情：
	设置当前是否在录音的变量为true
	显示dialog
	开启线程计时
	
	计时线程无线循环，判断条件为是否正在录音为false的是否将停止
	否则将每个100毫秒发送一次handler去跟新dialog显示的音量

6、处理onTouch时间：
	down
		调用修改状态，表示正在录音，需要修改view的样式

	move
		判断是否在录音，然后获取移动的位置，如果位置超出了view自身就修改状态为将要取消，否则修改状态表示在正在录音
	up
		if(判断是否长按){
			如果不是的话将重置长按变量，正在录音变量，并且修改状态为原始样式，
			return super;
		}
		if(当前是否在录音或者录音时间是否短于指定时间){
			如果是的话将修改dialog样式为时间过短
			cancel录音管理类
			并延迟1秒时间发送handler通知取消dialog
		}else if(如果录音状态是正常结束){
			如果是的话就取消dialog，释放录音管理类
			并回调录音时长和录音文件路径给外面
		}else if(如果是取消录音){
			取消dialog
			cancel录音管理类
		}
		重置
二、Dialog管理类
1、在构造的时候创建dialog

2、提供5个方法
1）正在录音，修改成正在录音的样式
2) 取消录音，修改成取消录音的样式
3) 录音过短，修改成录音过短的样式
4) dismiss， dismissdialog
5) 更新录音等级，修改成各种录音的等级

三、录音管理类
1、使用单例模式，并且传入一个文件路径

2、提供7个方法
1）开始录音
	判断文件是否存在并且初始化录音类，并且start录音，并且回调状态告诉自定义View已经开始录音，让他做操作
2）生成随机文件名，可有可无
	/*
	 * 随机生成文件名称
	 */
	private String getFileName() {
		return UUID.randomUUID() + ".amr";
	}
3）定义一个回调借口，用于通知自定义view已经开始录音
4）返回音量等级，通过录音类获取音量并且计算然后返回
5) 停止录音释放录音类
6) 停止录音释放录音类并删除文件
7) 返回文件路径

四、播放录音管理类
public class MediaManager {
	private static MediaPlayer mMediaPlayer;
	private static boolean isPuase;

	public static void playSound(String filePath,
			OnCompletionListener completionListener) {
		if (mMediaPlayer == null) {
			mMediaPlayer = new MediaPlayer();
			mMediaPlayer.setOnErrorListener(new OnErrorListener(
					) {
				
				@Override
				public boolean onError(MediaPlayer mp, int what, int extra) {
					// TODO Auto-generated method stub
					mMediaPlayer.reset();
					return false;
				}
			});
		} else {
			mMediaPlayer.reset();
		}

		try {
			mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
			mMediaPlayer.setOnCompletionListener(completionListener);
			mMediaPlayer.setDataSource(filePath);
			mMediaPlayer.prepare();
			mMediaPlayer.start();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void pause() {
		if (mMediaPlayer != null && mMediaPlayer.isPlaying()) {
			mMediaPlayer.pause();
			isPuase = true;
		}
	}

	public static void resume() {
		if (mMediaPlayer != null && isPuase) {
			mMediaPlayer.start();
			isPuase = false;
		}
	}

	public static void release() {
		if (mMediaPlayer != null) {
			mMediaPlayer.release();
			mMediaPlayer = null;
		}
	}
}



