public abstract class BaseFragment extends Fragment {  
    
	//用于判断Fragment是否显示
	protected boolean isVisible;  
    /** 
     * 在这里实现Fragment数据的缓加载. 
     * @param isVisibleToUser 
     */  
    @Override  
    public void setUserVisibleHint(boolean isVisibleToUser) {  
        super.setUserVisibleHint(isVisibleToUser);  
        if(getUserVisibleHint()) {  
            isVisible = true;  
            onVisible();  
        } else {  
            isVisible = false;  
            onInvisible();  
        }  
    }  
  
    protected void onVisible(){  
        lazyLoad();  
    }  
	
//主要重写该方法，需要加载的方法重写在里面，  
    protected abstract void lazyLoad();  

//不可见的时候调用，可以想OnVisible一样写一个抽象方法在里面调用
    protected void onInvisible(){}  
} 

public class HomeFragment extends BaseFragment {
    private View contentView;
    @Override
    protected void lazyLoad() {
	//获取数据设置数据什么的
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
	//必须在这里把所有控件寻找，不然会空指针
        contentView = LayoutInflater.from(context).inflate(R.layout.fragment_home);
//        initViews();
//        或者Buttkerknife.init(this)
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return contentView;
    }
}