 upload(){
 HttpURLConnection conn = initConnection(url);
 int responseCode = -1;
        try {
            responseCode = conn.getResponseCode();
            if (responseCode == 200 || responseCode == 206) {
                //连接成功
                //获取文件总长度
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                    filesize =  conn.getContentLengthLong();
                } else {
                    filesize = conn.getContentLength();
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        return -1;
 
long average = fileSize / threadCount;
        for (int i = 0; i < threadCount; i++) {
            long startLength = i * average;
            long endLength = 0;
            if (i + 1 == threadCount) {
                endLength = fileSize;
            } else {
                endLength = average * (i + 1) - 1;
            }

            new Thread(new UploadRunnable(context, url, apkpath.getName() + "-" + i, startLength, endLength, fileSize, uploadCallBack, apkpath)).start();
        }

 }



 package com.bjesc.app.uploadapk.utils;

import android.content.Context;
import android.util.Log;

import com.bjesc.app.uploadapk.service.UpLoadService;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;


/**
 * Created by Jason Chen on 2017/3/24.
 */

public class UploadRunnable implements Runnable {
    private RandomAccessFile raf;
    private BufferedInputStream bis;
    private String url;
    private long startLength;
    private long endLength;
    private long contentLength;
    private OnUploadCallBack callBack;
    private File apkPath;
    private Context context;
    private String saveName;    //用于保存当前线程进度的名字


    public UploadRunnable(Context context, String url, String saveName, long startLength, long endLength, long contentLength, OnUploadCallBack callBack, File apkPath) {
        this.contentLength = contentLength;
        this.startLength = startLength;
        this.endLength = endLength;
        this.callBack = callBack;
        this.saveName = saveName;
        this.apkPath = apkPath;
        this.context = context;
        this.url = url;
    }



    @Override
    public void run() {
        conductReadAndWrite(url, apkPath, startLength, endLength, contentLength, callBack);
    }

    private void conductReadAndWrite(String url, File apkPath, long startLength, long endLength, long contentLength, OnUploadCallBack callBack) {
        if (apkPath == null || apkPath.isDirectory()) {
            return;
        }
        if(startLength >= endLength){
            return;
        }
        if (endLength == 0) {
            return;
        }
        try {
            HttpURLConnection conn = initConeection(url);
            if (conn == null) {
                return;
            }
            
            Log.d(TAG, "____upload code = : " + conn.getResponseCode());
            bis = new BufferedInputStream(conn.getInputStream());
            raf = new RandomAccessFile(apkPath, "rw");
            raf.seek(startLength);
            byte[] bys = new byte[1024 * 4];
            int len = 0;
            while ((len = bis.read(bys)) != -1) {
                startLength += len;
                raf.write(bys, 0, len);
                if (callBack != null) {
                    callBack.onProgress(len, contentLength);//进度
                }
                if (UpLoadService.isStop) {
                    return;
                }

            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (bis != null) {
                try {
                    bis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (raf != null) {
                try {
                    raf.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }
    }

    private HttpURLConnection initConeection(String url) {
        HttpURLConnection conn = null;
        try {
            conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setRequestMethod("GET");       //连接方式
            conn.setConnectTimeout(4000);       //连接超时
            conn.setReadTimeout(4000);          //读取超时
            conn.setRequestProperty("Range", "bytes=" + startLength + "-" + endLength);
            conn.setRequestProperty("Accept", "image/gif,image/jpeg,image/pjpeg,application/x-shockwaveflash,application/xaml+xml,application/vnd.ms-xpsdocument,application/x-ms-xbap,application/x-ms-application,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,*/*");
            conn.setRequestProperty("Accept-Language", "zh-CN");
            conn.setRequestProperty("Charset", "UTF-8");
            conn.setRequestProperty("User-Agent", "Mozilla/4.0(compatible;MSIE 7.0;Windows NT 5.2;Trident/4.0;.NET CLR 1.1.4322;.NET CLR 2.0.50727;.NET CLR 3.0.04506;.NET CLR 3.0.4506.2152;.NET CLR 3.5.30729)");
            conn.setRequestProperty("Connection", "Keep-Alive");
            return conn;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }



    public interface OnUploadCallBack {
        void onProgress(long progress, long maxLength);

    }

    private static final String TAG = "UploadRunnable";
}
