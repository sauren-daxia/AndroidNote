1、实现implements NestedScrollingParent ,NestedScrollingChild

2、添加必要变量
  //---嵌套滑动所需要的变量
    private NestedScrollingParentHelper mParentHelper;  //嵌套滑动父类帮助类
    private NestedScrollingChildHelper mChildHelper;//嵌套滑子类帮助类
    private final int[] mParentScrollConsumed = new int[2];
    private final int[] mParentOffsetInWindow = new int[2];
    private float mTotalUnconsumed;
    //---嵌套滑动所需要的变量

3、初始化辅助类
  /**
     * 初始化嵌套滑动帮助类
     */
    private void initHelper() {
        mParentHelper = new NestedScrollingParentHelper(this);
        mChildHelper = new NestedScrollingChildHelper(this);
        setNestedScrollingEnabled(true);
    }

4、实现方法

//------------------------------------------------父------------------------------------------------------------------------------
    @Override
    public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) {
        Log.d("CHEN------父","onStartNestedScroll--target:"+target+",       nestedScrollAxes:"+nestedScrollAxes+"       child:"+child);
        //判断是横向滑动或者是竖向滑动，nestedscrollAxes值是关键，如果是false就没有嵌套滑动的后续了
        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;//判断是否竖滑动
    }

    @Override
    public void onNestedScrollAccepted(View child, View target, int axes) {
        Log.d("CHEN------父","onNestedScrollAccepted    target:"+target+",  nestedScrollAxes:"+axes+",    child:"+child);
        mParentHelper.onNestedScrollAccepted(child, target, axes);
        startNestedScroll(axes & ViewCompat.SCROLL_AXIS_VERTICAL);
        mTotalUnconsumed = 0;
    }

    @Override
    public void onStopNestedScroll(View child) {
        Log.d("CHEN------父","onStopNestedScroll--target:"+child);
        mParentHelper.onStopNestedScroll(child);
        if (mTotalUnconsumed > 0) {
            mTotalUnconsumed = 0;
        }
        stopNestedScroll();
    }

    @Override
    public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {
        dispatchNestedScroll(dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, mParentOffsetInWindow);
        final int dy = dyUnconsumed + mParentOffsetInWindow[1];
        if (dy < 0 ) {
            mTotalUnconsumed += Math.abs(dy);
        }
    }

    @Override
    public void onNestedPreScroll(View target, int dx, int dy, int[] consumed) {
        //在这里决定是否分发子view的滑动，然后父类会根据子类滑动的距离进行消费，分发多少看计算
//        consumed[1]=dy/2;//完全消费y轴的滑动

        Log.d("CHEN------父","-----------onNestedPreScroll dy ="+dy+",      mTotalUnconsumed = "+mTotalUnconsumed);
        if (dy > 0 && mTotalUnconsumed > 0) {
            if (dy > mTotalUnconsumed) {
                consumed[1] = dy - (int) mTotalUnconsumed;
                mTotalUnconsumed = 0;
            } else {
                mTotalUnconsumed -= dy;
                consumed[1] = dy;
            }
        }
        Log.d("CHEN------父","onNestedPreScroll--getScrollY():"+getScrollY()+",     dx:"+dx+",       dy:"+dy+",     consumed[0]:"+consumed[0]+",      consumed[1]"+consumed[1]);

        final int[] parentConsumed = mParentScrollConsumed;
        if (dispatchNestedPreScroll(dx - consumed[0], dy - consumed[1], parentConsumed, null)) {
            consumed[0] += parentConsumed[0];
            consumed[1] += parentConsumed[1];
        }

    }

    @Override
    public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) {
        return dispatchNestedFling(velocityX, velocityY, consumed);
    }

    @Override
    public boolean onNestedPreFling(View target, float velocityX, float velocityY) {
        return dispatchNestedPreFling(velocityX, velocityY);
    }

    @Override
    public int getNestedScrollAxes() {
        return mParentHelper.getNestedScrollAxes();
    }

    //------------------------------------------------子，不需要任何手动代码------------------------------------------------------------------------------

    @Override
    public void setNestedScrollingEnabled(boolean enabled) {
        Log.d("CHEN------子", "setNestedScrollingEnabled:" + enabled);
        mChildHelper.setNestedScrollingEnabled(enabled);
    }

    @Override
    public boolean isNestedScrollingEnabled() {
        //决定是否支持嵌套
        Log.d("CHEN------子", "isNestedScrollingEnabled");
        return mChildHelper.isNestedScrollingEnabled();
    }

    @Override
    public boolean startNestedScroll(int axes) {


        return mChildHelper.startNestedScroll(axes);
    }

    @Override
    public void stopNestedScroll() {
        Log.d("CHEN------子", "stopNestedScroll");
        mChildHelper.stopNestedScroll();

    }

    @Override
    public boolean hasNestedScrollingParent() {
        Log.d("CHEN------子", "hasNestedScrollingParent");
        return mChildHelper.hasNestedScrollingParent();
    }

    @Override
    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
                                        int dyUnconsumed, int[] offsetInWindow) {
        Log.d("CHEN------子", "dispatchNestedScroll:dxConsumed:" + dxConsumed + "," +
                "dyConsumed:" + dyConsumed + ",dxUnconsumed:" + dxUnconsumed + ",dyUnconsumed:" +
                dyUnconsumed + ",offsetInWindow:" + offsetInWindow);
        return mChildHelper.dispatchNestedScroll(dxConsumed,dyConsumed,dxUnconsumed,dyUnconsumed,offsetInWindow);
    }

    @Override
    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
        Log.d("CHEN------子", "dispatchNestedPreScroll:dx" + dx + ",dy:" + dy + ",consumed:" + consumed + ",offsetInWindow:" + offsetInWindow);
        return mChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
    }

    @Override
    public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) {
        Log.d("CHEN------子", "dispatchNestedFling:velocityX:" + velocityX + ",velocityY:" + velocityY + ",consumed:" + consumed);
        return mChildHelper.dispatchNestedFling(velocityX, velocityY, consumed);
    }

    @Override
    public boolean dispatchNestedPreFling(float velocityX, float velocityY) {
        Log.d("CHEN------子", "dispatchNestedPreFling:velocityX:" + velocityX + ",velocityY:" + velocityY);
        return mChildHelper.dispatchNestedPreFling(velocityX, velocityY);
    }