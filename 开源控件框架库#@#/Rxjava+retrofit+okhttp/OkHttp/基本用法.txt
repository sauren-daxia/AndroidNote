	OkHttpClient okHttpClient = new OkHttpClient.Builder()
                        .addInterceptor() //请求前的拦截器
                        .addNetworkInterceptor() // 网络拦截器
                        .cache() // 缓存目录
                        .connectTimeout() // 连接超时
                        .cookieJar() // cookie的读取，保存，需要自己实现
                        .sslSocketFactory() // https证书
                        ...略...
                        .build();

GET用法：
	//创建一个request，包含请求地址、请求参数、请求头等
	Request request = new Request.Builder()
			.url(url)
			.build();

	//同步请求，得到响应
	Response response = client.newCall(request).execute();
	return response.body().string();

POST用法：
	//创建请求参数，注意，此处有多种方式
	RequestBody requestBody = new FormBody.Builder()
				.add("param", "value")
				.build();
		
	//创建请求request
	Request request = new Request.Builder()
			.url("https://wwww.xxx.com")
			.post(requestBody)
			.build();
	//发起请求，此处使用的是异步请求，按需要选择同步或异步
	okHttpClient.newCall(request)
			.enqueue(new Callback() {
		@Override
		public void onFailure(Call call, IOException e) {

		}

		@Override
		public void onResponse(Call call, Response response) throws IOException {
		//处理相响应
		}
	});

文件上传：
	//创建请求参数，设置对应的参数类型即可
	RequestBody requestBody = RequestBody.create
			(MediaType.parse("text/x-markdown; charset=utf-8"), new File("xxx.txt"));

	//创建请求request
	Request request = new Request.Builder()
			.url("https://wwww.xxx.com")
			.post(requestBody)
			.build();

	//发起请求
	okHttpClient.newCall(request)
		.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {

            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
		//处理相响应
            }
        });