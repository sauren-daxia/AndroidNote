public class NettyService {
    private static final String ACTION_START_NETTY_CLIENT = "com.sisisan.NettyService";
    private static final String TAG = "NettyService";
    private Channel open;
    private static final int PACKETLENGTH = 5000;  //切包长度（超过此长将分包）
    private static int OVERTIME = 10;  //发心跳后如超过这个时间未收到回复则判断通讯中断
    private boolean isSendPonG = false;  //是否发送心跳
    private int count;


    public NettyService connect(String host,int port) throws InterruptedException {
        EventLoopGroup group = new NioEventLoopGroup();
        try {
            Bootstrap b = new Bootstrap();
            b.group(group)						//添加一个线程组
            .channel(NioSocketChannel.class)
            .option(ChannelOption.TCP_NODELAY, true) 
            .handler(new ChannelInitializer<SocketChannel>() {
                @Override
                protected void initChannel(SocketChannel ch) throws Exception {
                    //ch.pipeline().addLast(new LineBasedFrameDecoder(2048));
                    // Charset c = Charset.forName("utf-8");
                    //ch.pipeline().addLast(new FixedLengthFrameDecoder(48));
                    //ch.pipeline().addLast(new StringDecoder(c));
                    // ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(2048, 0, 19));
                    //ch.pipeline().addLast("encoder", new LengthFieldPrepender(19, false));

                    // 添加心跳Handler
                    ch.pipeline().addLast("idleStateHandler", new IdleStateHandler(20000, 20000, 20000, TimeUnit.MILLISECONDS));

                    // 以"######"为结尾分割的 解码器,第一个参数为读取长度，如果这个长度里面没有####就会抛异常
                    ByteBuf delimiter = Unpooled.copiedBuffer("####".getBytes());
                    ch.pipeline().addLast(new DelimiterBasedFrameDecoder(1024, delimiter));
                    // 字符串解码 和 编码
                    ch.pipeline().addLast("decoder", new StringDecoder());
                    ch.pipeline().addLast("encoder", new StringEncoder());

		    //添加连接回调，！！这里有个坑，这个回调类必须再最后一行添加，否则上面添加的一些操作不生效
                    ch.pipeline().addLast(new SocketChannelHandler());
                }
            });

            ChannelFuture  f = b.connect(host, port).sync();
            if (f.isSuccess()) {
                open = f.channel();
                NettyMaanger.getInstance().setChannel(open);
            }
            f.channel().closeFuture().sync();
        } finally{
            group.shutdownGracefully();
        }
        return this;
    }
}