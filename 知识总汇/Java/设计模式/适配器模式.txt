适配器的使用原理：

适用于使用某个接口的某一个功能，但是那个接口的方法过多的情况。直接继承需要实现它所有的方法，这样不好。


第一步，创建一个抽象类实现该接口

第二部，创建一个子类继承自抽象类

第三部，重写父类实现的某一个功能即可。

-----------------------
PS：一般情况Java提供的类都有适配器类，所以，一些方法需要一个接口的，但这个接口的方法很多，
    可以找它的实现子类，重写它子类的某一个方法即可。


例子：
---------------
interface fly{
	void  add();
	void  del();
	void  check();
	...
}

abstract A implements fly{
	@override void add(){}		//实现接口的功能，只是空实现
	@override void del(){}
	@override void check(){}	
	...
}

class B extends A{
	@override add()
}