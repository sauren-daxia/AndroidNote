1、扩展函数
		通过扩展函数可以增强类的额外功能，但只是增强功能，并没有增加类原本的功能
		class Person				//现在的类没有任何功能

		fun main(agrs : Array<String>){
			Person().foo()			//扩展为Person的方法，Person就可以调用了
		}
		fun Person.foo(){
			println(this)			//这里的this表示该类的对象，也就是Person()的实例
		}

2、扩展函数注意事项
		1、扩展函数的类型是根据编译期时方法内部的类型决定的
		open class C

		class D: C()

		fun C.foo() : String { 
			println(this.javaClass)
			return "c"
		}

		fun D.foo()  : String { 
			println(this.javaClass)
			return "d"
		}

		fun printFoo(c: C) {
			println(c.foo())
		}

		fun main(args : Array<String>){
			printFoo(D())		//结果会输出 C , D.clss
		}

		原因是因为方法的形参实际上是C，而调用的时候自然去调用C的扩展而不是D的扩展，但由于传递的是D的实例
		所以虽然走了C的扩展输出了 c ，但是却打印了D的class

		2、如果扩展函数和成员函数相同，则会调用成员函数
		class Person{
			fun foo(){
				println("a")
			}

		}
		fun Person.foo(){
			println("b")
		}

		fun main(args : Array<String>){
			Person().foo()		//输出a
		}

		3、扩展函数可为空类型，不过需要自己去判断是否为空
		fun Any?.toString() : String {
			if(this == null ) return "null"		
			return toString()		//可以直接调用方法，不需要this.xxX()
		}

		4、扩展伴生对象函数，可以像静态方法一样调用
		fun Person(){
			companion object{}
		}

		fun Person.companion.foo(){}

		fun main(args : Array<String>){
			Person.foo()
		}

		5、将扩展方法变为类成员方法，和幕后属性一样，提供一个对外可见的方法调用扩展方法
		class A{
			fun bar(){}
		}
		
		calss B{
			fun baz(){}

			fun A.foo(){			//扩展方法只在类可见
				bar()
				baz()
			}

			fun foo(a : A){			//对外可见的方法，调用内部扩展方法
				a.foo()
			}
		}

		6、重写扩展函数，虽然扩展函数不能被其他类访问，但是子类可以继承和重写，但是依然不能访问父类的扩展函数，也就是super.foo()是不允许的
			open class A
			class B : A()
			class C{
				open fun A.foo(){
					println("C in A")
				}
				open fun B.foo(){
					println("C in B")
				}

				fun show(a : A){
					a.foo()
				}
			}
			class C1 : C(){
				override fun A.foo(){
					//super.foo() 是不允许的
					println("C1 in A")
				}

				override fun B.foo(){
					println("C1 in B")
				}
			}