1、就是指自己想实现该功能的接口，但是又不想写接口实现，
   想通过各种子类实现好了再传进来，这样可以做到动态替换实现内容

   interface Fly{
	fun fly()
   }

   class Preson(val fly : Fly) : Fly by fly	//使用参数的fly替代了自身需要实现的方法

   //本来，实现了Fly需要实现fly()方法，如果这样做的话，可能会限制类只有一种实现，如果想有多种不同的功能则得重写一个类
     举个例子，Person类是不会飞的，但它又不想只会一种飞行方式，所以自己不想去学，而是通过别人提供的飞行方式，
     这时候小鸟Fly实现了Fly的方式，飞机Fly实现了Fly的方式，Person现在想要小鸟Fly，那么就可以传小鸟Fly进来，
     可以随意替换实现内容，这样的操作性更强。

   