1、类
	类结构由类头、类名、类体组成 ,出了类名，其他都不是必须的
	class Person { }

	构造
		1、主构造
			1、主构造中的参数默认为val不可变，可设置类型，也可在构造中设置默认值
				class Person(a :String,var b :String, val c :String = "hello")

				PS:如果主构造的所有参数都有默认值，那么会自动生成一个public无参构造

			2、主构造初始化，因主构造不能包含代码块，需要在类体中使用init代码块初始化，如果主构造参数不为空可以直接在类体中使用
				class Person(a :String){

					val b = a.toString();		//直接使用

					init{				//初始化
						a = "hello"
					}
				}

			3、权限修饰主构造,如果需要修饰符，constructor关键字必须写，默认为public，也可以修饰为privete
				class Person private constructor(a :String){}

				class Person public constructor(){}	//默认，简写为class Person
		
		2、次构造
			1、一个类可以没有主构造，但再需要构造就只能在类体中定义，次构造可重载，次构造相当于主构造，
			   如果没有无参构造，子类继承必须调用，其次次构造的参数因为是一次性使用的，所有没有var或val修饰，也不可重写
				class Person{
					constructor(s : String){
					
					}
				}

			2、this构造委托，在一个类中，构造互相调用就叫构造委托
				class Person{
					val name : String = ""
					val age : Int = 0
					constructor(name :String , age : Int){
						this@Person.name = name
						this@Person.age = age
					}

					constructor(name :String):this(name,0){	//使用this()的方式把构造参数传给其他次构造
						//...
					}
				}
	类体主要包含：
			1、构造和init初始化代码块
			2、方法
			3、属性
			4、嵌套类和内部类
			5、对象声明

	继承：
			1、open开放子类，所有的类默认继承Any类，但所有的类默认为final不可继承的，如果要开放继承需要用open关键字修饰
				open class Person

				class Man : Person()		//如果父类无构造，默认必须使用无参构造

			2、super显示调用构造，如果父类没有无参构造，子类继承时必须声明一个与父类其中一个构造参数相同的构造
				open class Person{
					constructro(name :String ,age :Int){}
					constructor(name :String){}
				}
		
				方式一：主构造，必须与父类其中一个构造参数相同	
				class Man(manName : String) : Person(manName)				
				或
				class Man(manName :String,age : Int) : Person(manName ,age)
				或
				class Man : Person("无",0)

				方式二：次构造，必须与父类其中一个构造参数相同	
				class Man : Person{
					constructor(name) :super(name){}
				}

			3、子类继承父类时，如果父类有有参构造，而子类的构造没有标明参数是否可以变时，这是的构造参数只是一次性的，不可重复使用
				open Person(name : String){
				}
				或
				open Person{
					constructor(name:String)
				}

				class Man(nickName : String) : Person(nickName)			//现在的nickName是一次性的，把值赋值给父类的name之后就不可再次使用了

				相当于Java代码的
				public class Person{
					private String name;
					public Person(String name){
						this.name = name;
					}
				}

				publci class Man{
					public Man(Sring nickName){
						super(nickName);
					}
				}

				如果还想使用Man构造的参数，就需要定义是否可变类型
				class Man(var nickName : String) :Person(nickName)
				或
				class Man(val nickName : String) :Person(nickName)

				相当于Java代码的，只是自定义了一个变量，又把这个变量交给了父类构造，也就是有两个变量但值一样
				publci class Man{
					private String nickName;
					public Man(String nickName){
						this.nickName = nickName;
						super(nickName);
					}
				}
	方法重写
			1、override方法重写，不允许子类与父类有相同的方法(指同名同参数)，必须重写
				open class Person{
					open fun name(){}
				}
				
				class Man : Person(){
					override fun name(){}
				}

			2、如果已经重写过的方法不想继续被子类再重写，可以修饰为final
				open class Person{
					open fun name(){
					}
				}

				open class Man : Person(){
					fianl override fun name(){}
				}

	特殊重写方法
			1、super<?>选择实现，当继承了父类的一个方法，又实现了一个接口的方法，并且两个方法名或参数一模一样的时候
			   但是必须要实现一个方法，至于实现谁的，可选，也可以都选
				open class Airplane{
					open fun fly(){
						println("飞机会飞")
					}
				}

				open interface Wing{
					fun fly(){
						println("会飞")
					}
				}
	
				class Bird : Airplane(), Wing{
					override fun fly(){
						super<Airplane>.f()		//表示调用父类的方法
						super<Wing>.f()			//表示调用接口的方法
					}
				}

	属性重写
			1、override属性重写，与方法一样修饰属性
				open class Person{
					open val name :String = ""
				}
				
				class Man : Person(){
					override var name :String = ""
				}
				或
				class Man : Person(){
					override var name : String
						get() = super.name
						set(value){}
				}

				PS:父类的属性是val的，可以用var或val重写，如果父类的属性是var的不能用val重写，
				   原因很简单，属性是有get()set()方法的，val是没有set()方法的，var是有的
				   所以没有的能被有的覆盖，有的不能被没有的覆盖

			2、在主构造中可以重写父类的属性
				open class Person{
					open val name : String = ""
				}

				class Man(orverrid var name :String ="") : Person()

				PS:主构造可以重写是因为主构造参数是类的属性，次构造不可重写是因为次构造只是一个形参一次性使用的

	调用父类方法
			1、super调用父类方法与Java一样
				open class Person(){
					fun name(){
						println("我是谁")
					}
				}

				class Man : Person(){
					fun showName(){
						super.name()			//与Java一样
					}
				}

			2、在内部类调用外部类方法，比Java新增一个功能，如果外部类的方法或属性是重写的，那么可以调用重写前父类的方法
				open class Person{
					open var age : Int = 0
					open fun f(){
						println("这是父类方法")
					}
				}

				class Man : Person(){
					override var age : Int = 1
					override fun f(){
						println("这是子类的方法")
					}

					inner class Child{
						fun show(){
							f()			//可以直接使用外部类的方法
							super@Man.f()		//调用外部类重写前父类的方法
				
							age			//可以直接使用外部类的属性
							super@Man.age		//调用外部类重写前父类的属性
						}
					}
				}

2、抽象类
		1、抽象类可以有抽象属性和抽象方法，但是都不能有具体实现
			abstract class Base{
				abstract var name :String	//抽象属性不必初始化，也不能初始化
				abstract fun getdata()		//抽象方法不能具体事项
			}

			class Person : Base(){
				override var name :String = ""
				override fun getdata(){}
			}

			PS:属性和方重写的方式与普通类一样，可以在主构造重写属性，可以在类体重写，可以直接赋值可以重写get()set()

		2、抽象类可以把父类可被重写的方法和属性再抽象
			open class Base{
				open var name :String = ""
				open var age : Int = 0

				open fun getName(){}
				open fun getAge(){}
			}

			abstract class Person : Base(){
				abstract override var name :String		//再抽象属性
				final override var age : Int = 1		//重写后不再被重写
				
				abstract override fun getName()			//再抽象方法
				final override fun getAge(){}			//重写后不再被重写
			}