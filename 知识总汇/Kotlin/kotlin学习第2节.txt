1、if判断
	传统用法
	if( 1 > 2)

	表达式用法
	1:
	val a = if(1 > 2) 2 else 3
	2:
	val a = if(1 > 2){		//如果判断语句里有代码快，作为表达式的时候要将返回值放在最后一行
		println("")
		2
	}else{
		println("")
		3
	}
	3：
	fun sum(a : Int , b : Int) = if( 1 > 2) {println("") 2} else {println("") 3}	//可以带代码快，与第2中方式一样

2、when判断
	代替switch传统用法
		when(1){
			1	-> println(1)
			else	-> println(2)
		}

	表达式用法	//表达式一定要有else，除非条件包含所有可能性
		1:
		var a  = 2
		val b = when(a){
			is Int	-> true
			1,3,4	-> 3			//多个条件执行同一个语句用,分开
			else	-> "错误"
		}
		2:
		fun abs(obj : Any) : Int = when(obj){		//方法指定类型
			is String	-> obj.length
			else		-> 1 
		}
		3:
		fun abs(obj : Any) = when(obj){			//不指定类型
			is String	-> obj.length
			true		-> "true"
			else		-> false
		}
	
	可以作为条件的表达是种类
		when(obj){
			judge(x)	-> false
			is String	-> false
			in 1..9		-> false
			!in 1..9	-> false
			as String	-> false
			true		-> false
			else		-> false
		}

	作为if判断来使用
		whenn{
			a > 5		-> true
			judge(x)	-> true
			is String	-> true
			as String	-> true
			in 1..9		-> true
			!in 1..9	-> true
			true		-> true
			1		-> true
			else		-> true			//非必须
		}

3、for循环
	迭代使用
		for(item in list)		//每个item代表子元素

	普通循环使用
		for( i in list.indices){	//i表示自增值
			println(list[i])
		}		
	
	自增值与元素同时迭代
		for( (i , item) in list.withIndex() ){		//i表示自增值，item表示子元素
			println("i = $i item = $item")
		}

	高阶方法迭代
		list.foreach{ item -> println(item)}

	迭代map
		for( (k , v) in map){				//k表示key，v表示value
			println("k = $k v = $v")
		}

4、while和do..while与Java一样

5、支持break和continue、return

	break用法与Java一样可以多层跳出
		loop@ for(i in list){		//java使用A:表示，kotlin则是用A @表示
			if(i == x){
				break@loop
			}
		}

	return
		多层结束与Java一样
		1、
		for(i in list){
			for(j in list){
				return
			}
		}

		2、
		fun abs(){
			list.foreach{
				i -> return
			}
		}

		结束lambda层
		fun abs(){				//只结束lambda表达式,可以不用标记 @a，直接return @foreach也可，因为默认方法名就是标记
			list.foreach a@ {
				i -> return @a
			}
		}

