1、对象表达式，通过表达式来创建对象
	1)第一种
		view.setOnclickListener(object : OnClickListener{
			override fun onClick(view : View){

			}
		})

	2)第二种
		class Person
		interface B
		fun foo(){
			val a =object :Person(), B{		//创建某个匿名类的同时还可以继承类或实现接口
			
			}
		}

	3)第三种
		val a = object{					//凭空生成一个匿名类
			var age : Int = 1
			var name : String ="hello"	
		}

	4)第四种
		class C{
			private fun a() = object{		//使用private修饰的方法，如果返回值是匿名类，则可以在类内部使用它的所有属性
				val x = 1
			}

			fun b() = object{			//默认是public修饰的方法，如果返回值是匿名类，则会当成Any类一样
				val x = 1
			}

			fun foo(){
				val a = a().x       //可以
				val b = b().x       //不可以
			}
		
		}
2、单例
	object关键字加上类名就表示这是一个单例，类可以继承可以实现
	object UserManager{
		fun getInstance() = userMaanger

		private val userMaanger = UserManager
	}
		fun main(args : Array<String>){
			UserManager.getInstance();
		}

3、伴生对象
	companion关键字，伴生对象还可以实现接口，但不能继承类
	class MyClass {
		companion object Factory {				//Factory只是一个别名，可要可不要
			fun create(): MyClass = MyClass()
		}
	}
		fun main(args : Array<String>){
			MyClass.create()			//这种是直接使用伴生对象的方法
			MyClass.Factory.create()		//这种是通过调用伴生对象调用方法
		}