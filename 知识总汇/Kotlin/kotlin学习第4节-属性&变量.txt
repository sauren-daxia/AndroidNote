1、属性字段	
		1、var、varl定义属性
		open class Person{
			val name = ""
			val nickName : String = ""
			var headImg : String = ""
		}

		2、get、set构造
			1、field关键字意义是幕后字段，事实上是因为kotlin没有字段这说法，只有属性，想自定义get、set访问器时候
			   就需要使用field来替代属性，例如
					var name = ""
						get() = field	//这里表示调用get访问器的时候返回了一个由name生成的幕后字段field，这个field也代表着name

			2、var类型，可以有get、set
				1)第一种：只有get
					var name = ""
						get() = field

				2)第二种：只有set
					var name = ""
						set(value){
							field = value
						}
				
				3)第三种：get、set都有
					var name : String? 
						get() = null
						set(value){
							//可以不写任何东西
						}
				
			3、val类型，只可以有get
				val age 
					get() = 1	//因为val是只读的，只能返回一个值，如果get有返回值则不需要初始值

				val age = 1
					get() = field	//如果有初始值，那么get只能返回field

			4、get、set访问权限以及注解
				1、权限
					private var  name :String = ""		//不能私有化get方法，只能私有化属性，因为如果私有化get的话，调用属性就不合理了

					var  name : String = ""
						private set			//如果私有化set的话，就类似val类型了
						或
						private set(value){
						
						}
				
				2、注解
					var name : String = ""
						@Inject set			//注解可以不写内容，因为注解有他自己的实现
						@Inject get

			5、get、set写法
				1)val的第一种get写法	
				val name : String
					get(){
						return ""
					}
				
				2)val的第二种get写法
				val name get() = ""

2、幕后属性
		幕后属性是一种设计并不是一种语法，是通过接近两个相同的变量处理同一个功能，
		一个变量提供可读可写，另外一个只提供可读，另外一个读取的时候则是调用可读可写的变量的值最为返回
		标准的格式例如：
		private var _name : String = ""			//在内部可读可写
		public val name get(){				//在外部只提供可读
			if(_name ==null){
				_name =""
			}
			return _name!!
		}

3、编译其常量
		const关键字用于在编译使其就已经确定这个变量的值，也就是Java常说的static final常量
		跟类体里面定义初始化的普通的val、var不一样，普通的var、val是在运行期生成的对象
		而const是在最初的时候就已经生成了，占用了一定的内存空间

		使用的条件为
			1、位于顶层或者是 object 的一个成员
			2、用 String 或原生类型 值初始化
			3、没有自定义 getter

		const val TAG = "CHEN"	//位于类之外的区域
		class Person{}

4、延迟初始化属性
		lateinit关键字可以不初始化值，而是延迟在某个特定的功能里面初始化，但是类型必须是自定义类型，不能是基础类型
		并且如果在没初始化之前访问该变量会抛出一个特定异常:
			kotlin.UninitializedPropertyAccessException: lateinit property man has not been initialized

		class Person{
			lateinit var man : Man

			fun a(){
				man.b()
			}

			fun c(){
				man = Man()
			}
		}
		class Man{
			fun b(){}
		}

