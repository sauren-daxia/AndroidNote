
	定义：  Http超文本传输协议，属于应用层

	作用：	规定应用进程通讯的准则

	特点：
		Http协议是基于TCP协议

			传输效率高：
					无连接状态：在不需要交换报文(请求)前，不需要建立连接

					无状态    ：数据传输过程不保留任何历史状态，无状态简化了服务器设计，所以支持大量并发请求

					传输格式简单：请求只需要指定请求方式(POST、GET) & 路径即可

			传输可靠性高：
					采用TCP作为传输协议

					只需要在请求的过程建立连接即可，开始前和结束后都不需要连接

			其他：
					兼容性好，支持B/S（浏览器，服务器），C/S（客户端，服务器）架构

					灵活性好，允许传输任意对象(Text,File,Byte等)

	工作方式：采用请求/响应的工作方式

			Client			Service

					<-------循环监听TCP端口80

			发送连接建立请求-------->

			双方建立请求-----><-----双方建立请求

			发送请求报文------------>

				    <-----------返回请求响应报文

			请求完断开连接----><----响应完断开连接

	Http请求报文：
			用途：用于请求时/响应时

			结构：
				请求行(Request Line)：	声明请求方式、主机名、资源路径 & 版本协议

							【请求方式(POST、GET)】+【空格】+【请求路径(URL)】+【空格】+【协议版本】+【回车符】+【换行符】

									请求方式(8种常用，GET、POST)：
											GET ：获取服务器资源

											POST：向服务器添加资源

											HEAD：获取头部信息

											GET/POST区别：
														长度		数据类型		安全性			应用场景
													
													GET ：通过URL拼接最长	只允许使用ASCII		差，由于可见		小量，数据不敏感
													      是2048个字符	

													POST：不受限制		不受限制		好，封装在Http请求中	大量，数据敏感

									请求路径：	
											如：http://www.baidu.com/ ，请求路径则 = / 或 = 空

											如：http://www.weibo.com/288/home ，请求路径则 = 288/home

									协议版本：
											http1.0

											http1.1

											http2.0
									

				请求头部：		声明客户端、服务器/报文的部分信息
						
							【头部字段名(key)】+【 : 】+【值(value)】+【回车符】+【换行符】		//有多少参数都按这个格式
			
									客户端服务器通用头部类型：
											Content-type		:请求体/响应体，如：text/plain、application/json...

											Accept			:接收类型，可以多个值用逗号分开
							
											Content-Length		:请求体/响应体的长度

											Content-Encoding	:请求体/响应体的编码格式

											Accept-Encoding		:告诉对方，我方接收的Content-Lengthh

											ETag			:配合Last-Modified、If-None-Match、If-Modified-Since控制缓存

											CaChe-Control		:缓存时间，格式为no-cache、max-age=xx，xx是整数，单位秒

									常用头部类型：
											Cookie			:

											User-Agent		:用户标识，客户端类型或浏览器类型或版本

											If-Modified-Since	:值为Last-Modified的值，如果没修改过(304)，就从缓存读取

											If-None-Match		:和ETag一起出现，控制缓存的

											Host			:请求的主机端口

							【回车符】+【换行符】		//当请求行和请求头部都设置完，还有请求数据的时候需要换行分割

				请求数据体：		存放需要发送的数据信息
				
									常见类型：
											键值对			:key=value
		
											任意类型数据		:json,xml...

	Http响应报文：

			结构：
				状态行：		声明协议版本、状态码、状态描述

							【协议版本】+【空格】+【状态码】+【空格】+【状态信息】+【回车符】+【换行符】

									协议版本	：http1.0、Http1.1、Http2.0

									状态码		：3进制表示，5大类型

												1xx	：请求正在执行

												2xx	：请求成功
														200：请求成功

														202：以接受请求，未处理


												3xx	：重新定向，如果要完成请求还需要进一步星都
														301：请求的资源被永久移动到新的位置

														302：请求的资源被临时移动到新的位置

												4xx	：客户端错误，语法或无法实现
														400：参数错误，服务器无法解析

														401：请求需要验证用户
													
														403：不能访问该地址

														404：Not Found ，没找到

														408：请求超时

												5xx	：服务器错误，服务器不能实现无效的请求
														500：服务器内部错误

														502：Bad Gateway网关错误

				响应头部：		声明客户端、服务器/报文的部分信息
							
							【头部字段名(key)】+【 : 】+【值(value)】+【回车符】+【换行符】		//有多少参数都按这个格式			

									客户端服务器通用头部类型：和请求头部常用的一样

									常用头部类型：大体和请求的一样
											Data			：服务器的日期

											Last-Modified		：该资源最后被修改的时间

											set-Cookie		：设置Cookie

				请求数据体：		存放需要发送的数据信息
				
									常见类型：
											键值对			:key=value
		
											任意类型数据		:json,xml...
			
		HTTPS和HTTP的区别：
						原理		数据加密	安全性		标准端口	CA申请证书	URL开头

				HTTP：		应用层		不加密		不安全		80		不需要		http://

				HTTPS：		传输层		加密		安全		443		需要		https://

		HTTP1.1 与 HTTP1.0的区别
			
				引入持久连接，即 在同一个TCP的连接中可传送多个HTTP请求 & 响应
				
				多个请求 & 响应可同时进行、可重叠
				
				引入更加多的请求头 & 响应头

		HTTP1.1处理长连接的方式

				HTTP1.1默认保持长连接，数据传输完后不断开，继续使用该通道

				建立长连接头部类型：Connection，

							Connection.close			：表示不建立长连接

							Connection:keep-Alve:max = xx		：失败重试多少次后断开连接

							Connecton:keep-time:time = xx		：超过多少时长则断开，单位秒

									keep-Alve机制		：开启后，TCP则定时发送KeepAlve探针确保连接可用性

				结束长连接：

							判断Content-Length是否达到了指定大小

							根据Chunked编码判断，如果在数据的最后有一块空的Chunked编码，则表示连接结束

	PS：熟悉完HTTP的结构之后就要去看能实现协议的类库的API，然后通过调用类库的API组成协议要求的规定
	    最后实现通讯的过程