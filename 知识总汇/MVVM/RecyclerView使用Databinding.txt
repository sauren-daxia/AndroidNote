这里演示多个Type的，单个其实也一样


//构造ViewHolder的时候传入一个ViewDataBinding，用这个ViewDataBinding代理控制View
public class BindingViewHodle<T extends ViewDataBinding> extends RecyclerView.ViewHolder {
    private T binding;

    public BindingViewHodle(T binding) {
        super(binding.getRoot());
        this.binding = binding;
    }

    public T getBinding() {
        return binding;
    }
}


public class PeopleAdapter extends RecyclerView.Adapter<BindingViewHodle> {
    private int isON = 1;
    private int isOFF = 2;

    private Context con;
    private final LayoutInflater inflater;
    private List<MainActivity.People> list = new ArrayList<>();
   
    public PeopleAdapter(Context con, List<MainActivity.People> list) {
        this.con = con;
        inflater = LayoutInflater.from(con);
        this.list = list;
    }

    //通过Type构建不同的Binding对象，然后交给ViewHolder
    @Override
    public BindingViewHodle onCreateViewHolder(ViewGroup parent, int viewType) {
        ViewDataBinding binding;
        if (viewType == isON) {
            binding = DataBindingUtil.inflate(inflater, R.layout.item_on, parent, false);
        } else {
            binding = DataBindingUtil.inflate(inflater, R.layout.item_off, parent, false);
        }
        return new BindingViewHodle(binding);
    }

    //在Binding完之后要给xml里面的数据设置值，因为我们的Binding类在ViewHolder里面所以可以获取
    //然后设置值，设置值的方式只能通过xml里面定义类型的name设置，例如BR.xxx
    //值设置完后还不会立即刷新数据，需要手动调用executePendingBindings()方法
    @Override
    public void onBindViewHolder(BindingViewHodle holder,final int position) {
        holder.getBinding().setVariable(BR.item, list.get(position));
        holder.getBinding().executePendingBindings();
    }

    @Override
    public int getItemViewType(int position) {
        final MainActivity.People people = list.get(position);
        if (people.isOut == isON) {
            return isON;
        } else {
            return isOFF;
        }
    }

    @Override
    public int getItemCount() {
        return list.size();
    }
}

xml里面和普通的一样没什么区别