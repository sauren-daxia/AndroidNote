1、数据必须申明在第一层容器之前
<layout>
	<data>
	</data>
	<RelativeLayout>
	</RelativeLayout>
</layout>

2、自定义DataBinding的类名和生成路径
	1)第一种
	<layout class="CustomDataBiding">		//未知效果
	</layout>

	2)第二种
	<layout class=".CustomDataBinding">		//未知效果
	</data>

2、类型引用
	1)第一种
	<data>
		<variable
			name="userBean"						//变量名,变量名不能包含下划线_字符
			type="com.example.chen.vr_demo.bean.UserBean"		//类全路径
		/>

		<import type="android.view.View"/>				//如果需要使用View的一些属性，则需要导包，其他类也一样
	</data>
	
	2)第二种,假如在data里面使用了同一个包下面的多个类：
	<data>
		<import type="com.example.chen.vr_demo.bean"/>		//建议还是用第一种方式
		<variable name="userBean" type="UserBean"/>
		<variable name="moneyBean" type="MoneyBean"/>		
	</data>

3、include引用数据
	1)需要先在include文件里先定义传递的变量名
		<layout>
			<data>
				<variable
					name="user"		//这里先定义变量名，然后传过来的时候需要指定这个变量名传递
					type="com.example.chen.vr_demo.bean.UserBean"/>		//定义类型
				<varialbe
					name="userName"
					type="String"/>
			</data>
		</layout>
	
	2)在引用的页面传递
		<layout>
			<data>
				<variable
					name="userBean"
					type="com.example.chen.vr_demo.bean.UserBean"/>
			</data>
			<RelativeLayout>
				<include
					layout="@layout/include_mvvm"
					bind:user="@{userBean}"			//使用bind:<变量名>传递数据，这个变量名就是include定义的数据类型的变量名
					bind:userName="@{userBean.name}"	//bind注意需要使用apk/res-auto命名空间
					/>
			</RelativeLayout>
		</layout>

3、使用数据
	<TextView
		android:text="@{userBean.name}"			//实体类里的变量get方法直接忽略，变成public方式调用即可
	/>

4、绑定事件
	现在类中定义事件
		public class Presenter{
			public void onClickAddItem(View v){		//方法签名必须和设置事件的方法签名一致，名字不管，返回值和参数一样就行
				//点击事件
			}

			public void toastMsg(String s){		//自定义事件其实就是定义一个方法，在lambda里面调用而已
				//自定义事件
			}
		}

	需要在data中声明
		<variable					
			name="presenter"
			type="com.test.jasonchen.mvvmtest.MainActivity.Persent" />

	需要在代码中设置
		binding.setPresenter(new Presenter());

		//标准事件
		<TextView
			android:onClick="@{presenter::onClickAddItem}"		//调用与onClick匹配的方法，方法引用统一使用::虽然也可以xx.xx
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"/>

		//自定义事件
		<TextView
			android:onClick="@{(view)-> presenter.toastMsg(people.name)}"	//自定义方法传的是lambda表达式，直接可以在里面写内容，这个lambda还可以写成() -> { }的形式
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"/>

			PS:lambda的写法意义其实就是 () -> { presenter.toastMsg(people.name) } 只是少写了括号，又没换行，看起来怪怪的