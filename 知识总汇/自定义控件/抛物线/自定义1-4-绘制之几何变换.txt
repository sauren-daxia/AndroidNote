							本节所有功能都需要使用
							canvas.save()
							...//功能
							canvas.restore();
1、范围裁剪
	clipRect(int left,int top ,int right,int bottom)	//裁剪一个矩形

	clipPath(Path p )					//裁剪一个路径

2、几何变换三种类型：
	canvas普通变换
	Matrix不规则变换
	Camera 3D变换

	Canvas变换
		canvas.translate(x,y)				//平移，垂直和水平方向移动

		canvas.rotate(float degrees,float x,float y)	//旋转
			参数说明：
			参数一：旋转角度,顺时针旋转，最大角度为360
			参数二：旋转X坐标点
			参数三：旋转Y坐标点，X和Y形成旋转中心点

		canvas.scale(float sx,float sy,float x, float y) //缩放
			参数说明：
			参数一：X轴缩放倍数，1为不缩放
			参数二：Y轴缩放倍数，1为不缩放
			参数三：缩放X坐标点
			参数四：缩放Y坐标点，X和Y形成缩放中心点

		canvas.skew(float sx,float sy)			//斜切，参数不好描述，只能自己尝试

	Matrix变换		
		Matrix详解: http://blog.csdn.net/cquwentao/article/details/51445269 
		矩阵详解：  http://www.ruanyifeng.com/blog/2015/09/matrix-multiplication.html
		Matrix matrix = new Matrix();			//构造

		matrix.reset()					//重置

		matrix.postConcat(Matrix)			//在当前变换基础上再加上变换

		matrix.postTranslate(x,y)			//平移，垂直和水平方向移动

		matrix.postRotate(float degress,float x,float y) //旋转和canvas一样的参数

		matrix.postScale(float sx,float sy,float x, floaty) //缩放和canvas一样的参数

		matrix.skew(float sx,float sy)			//斜切

		PS:Matrix有pre、post、set的方式，set不会叠加，pre、post可以叠加，但pre、post算法有区别，如果没什么特殊的用post就好了，除非会矩阵算法

	Matrix高级功能
		1、自由变换
		matrix.setPolyToPoly(float[] src,int srcIndex, float[] dst, int dstIndex,int pointCount)
				参数说明：
				参数一：需要控制的点，最多八个元素，每两个元素表示一个坐标点,[x,y]或[x,y,x,y]...
				参数二：第一个控制点偏移量，没用过一般为0
				参数三：目标控制点，最多八个元素，每两个元素表示一个坐标点,[x,y]或[x,y,x,y]...个数需要与参数一对应
				参数四：第一个控制点的目标偏移量，没用过一般为0
				参数五：需要进行改变的控制点数量，由第一第三参数决定，最多四个
					0个为不变，
					1个为平移
					2个为旋转
					3个为斜切
					4个为透视
		2、效果镜像翻转
		matrix.invert(Matrix)		//把自己传给自己就可以啦
		
		canvas.setMatrix(Matrix)			//将变换设置到canvas中，但是会把canvas原有的变化替换

		canvas.concat(Matrix)				//在canvas原有的变换上增加Matrix变换

	Camera3D	
		构造
		Camera camera = new Camera();

		camera.translate(x,y,z)		//移动
			参数说明：
			参数一：X轴移动偏移量
			参数二：Y轴移动偏移量
			参数三：Z轴移动便宜量，小于0图形越小，大于0图形越大，图形的大小会影响X、Y实际移动的位置

		camera.rotateX(int deg)		//X轴旋转，看不懂规律,实际上是沿着Y+Z旋转

		camera.rotateY(int deg)		//Y轴旋转，看不懂规律，实际上是沿着X+Z旋转

		camera.rotateZ(int deg)		//Z轴旋转，看不懂规律，实际上像圆一样旋转

		camera.rotate(X,Y,Z)		//XYZ轴一起旋转

		camera.applyToCanvas(Canvas)	//将旋转的内容映射到Canvas画布中

		camera.setLocation(x,y,z)	//设置Camera位置，x,y一般为0，z单位是英寸，与像素换算1英寸/72像素，默认是-8英寸

		camera.save()			//保存

		camera.restore()		//恢复

		PS:需要使用Canvas.translate()移动旋转轴心，如果不移动轴心，rotate*()方法旋转后会变形
			正确写法:
				canvas.save();
				Camera camera = new Camera();
				camera.save(); // 保存 Camera 的状态
				camera.rotateX(count); // 旋转 Camera 的三维空间
				canvas.translate(getWidth()/2, getHeight()/2); // 旋转之后把投影移动回来
				camera.applyToCanvas(canvas); // 把旋转投影到 Canvas
				canvas.translate(-(getWidth()/2), -(getHeight()/2)); // 旋转之前把绘制内容移动到轴心（原点）
				camera.restore(); // 恢复 Camera 的状态

				canvas.drawXxx()
				
				canvas.restore();