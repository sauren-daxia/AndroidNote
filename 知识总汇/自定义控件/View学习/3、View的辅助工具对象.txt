1、滑动速度对象：VelocityTracker
	跟踪用户在控件上，在规定时间内滑动的速度

	可以在onTouchEvent的Move中使用，方式如下：
		VelocityTracker	tracker = VelocityTracker.obtian();

		tracker.addMovement(event)

		tracker.computeCurrentVelocity(1000)	//监测指定时间内的滑动速度，单位毫秒，在调用下面两句之前必须调用

		int velocityX = (int)tracker.getXVelocity();	//获取X轴的滑动速度，单位像素

		int velocityY = (int)tracker.getYvelocity();	//获取Y轴的滑动速度，单位像素

		PS：获取到的速度可以为正数，也可为负数，其值结果按照滑动的方向计算，公式如下：

			速度 = （终点值 - 起点值）/ 时间值
		
		在不需要使用的时候需要手动回收：
		tracker.clear();

		tracker.recycle();

2、手势监测对象：GestureDetector
	主要监测：单机，滑动，长按，双击等

	可以在onTouchEvent的Move中使用，方式如下：
	GestureDetector gestureDetector = new GestureDetector(new GestureDetector.SimpleOnGestureListener());		//设置监听

	boolean consume = gestureDetector.onTouchEvent(event);	//监听Event的动作

	GestureDetector.SimpleOnGestureListener可以监听两种模式：

	单击：
		onDown():			//轻轻触摸，触发一个ACTION_DOWN

		onShowPress():			//轻轻触摸，触发一个ACTION_DOWN，与DOWN不一样的在于，不松手不移动

		onSingleTapUp():		//单击，触发一个ACTION_DOWN和一个ACTION_UP

		onLongPress():			//长按，
		
		onScroll():			//滑动，触发一个ACTION_DOWN和多个ACTION_MOVE
		
		onFling():			//快速滑动，触发一个ACTION_DOWN、多个ACTION_MOVE和一个ACTION_UP

	双击：
		onDoubleTap():			//双击，由两次单击组成

		onSingleTapConfirmed():		//严格的单击？
		
		onDoubleTapEvent():		//双击行为，在双击期间ACTION_DONW、ACTION_MOVE、ACTION_UP都会触发这个方法一次

		PS：
		1、在一次滑动过程中，会频繁的回调各个方法，而不是只回调其中相关的某一个

		2、一般长按后是不会有滑动事件的，如果需要可以这样实现:
			gestureDetector.setIsLongpressEnabled(false)

3、滑动对象：Scroller
	Scroller用法:

	//自定义的一个方法
	private void smoothScrollTo(int destX,int destY , int duration){
		//使用目标坐标X - 当前已经滑动了的距离，因为Scroll是反方向的，所以减的话就正确了
		int dx = destX - getScrollX();      
		int dy = destY - getScrollY();
		scroller.startScroll(getScrollX(), getScrollY(), dx, dy, duration);
		invalidate();//刷新，为了触发
	    }
	@Override
	public void computeScroll() {
		super.computeScroll();

		//调用mScroller.computeScrollOffset()方法会计算下一个目标位置
		if(!scroller.isFinished() && scroller.computeScrollOffset()){
		scrollTo(scroller.getCurrX(), scroller.getCurrY());
		invalidate();
		}
	}

	PS：尚不知Scroller.getCurrX()是什么
	
	ScrollTo、ScrollBy:

	1、都是移动容器里面的内容，而非本身。

	2、Scroll计算的方向是反的，所以向左移动是正值，向右移动是负值

	getScrollX、getScrollY:

	1、获取当前已经滑动的距离，获取的值也是反的。如果想移动到目标值，就用目标值 - getScroll

4、拖动对象：ViewDragHelper
	简化拖动View的操作性

	构造：
		ViewDragHelper.create(ViewGroup forParent, ViewDragHelper.Callback cb)
		参数一：操作对象所在的父容器
		参数二：拖动回调

		ViewDragHelper.create(ViewGroup forParent, float sensitivity, ViewDragHelper.Callback cb)
		参数一：操作对象所在的父容器
		参数二：
		参数三：拖动回调