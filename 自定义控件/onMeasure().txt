 //这个方法是设定宽高后，ViewGroup根据自身的控件告诉子View，宽最大能使用widthMeasureSpec，高最大能使用heightMeasureSpec
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        //通过MeasureSpec.getSize()可以获取当前最大的尺寸
        //通过MeasureSpec.getMode()可以获取当前的模式？
        Log.d(TAG, "onMeasure: widthMode = "+MeasureSpec.getMode(EXACTLY));
        Log.d(TAG, "onMeasure: widthMode = "+MeasureSpec.getMode(AT_MOST));
        Log.d(TAG, "onMeasure: widthMode = "+MeasureSpec.getMode(UNSPECIFIED));
        Log.d(TAG, "onMeasure: widthSize = +"+MeasureSpec.getSize(widthMeasureSpec));
        Log.d(TAG, "onMeasure: heightMode = "+MeasureSpec.getMode(heightMeasureSpec));
        Log.d(TAG, "onMeasure: heightSize = +"+MeasureSpec.getSize(heightMeasureSpec));

        //如果计算上面的尺寸不符合自己的需求的时候可以调用该方法去请求自己需要的尺寸，但是ViewGroup不一定接受
        resolveSizeAndState((int)(20), widthMeasureSpec, 0);
        resolveSizeAndState((int) (50), heightMeasureSpec, 0);
        //通过上面修改后的宽高，最后设置到这里
        setMeasuredDimension(1,1);
    }