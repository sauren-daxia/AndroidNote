Paint.setColor(int color)	//画颜色

Paint.setStyle(Paint.Style style)	//画空心或实心

Paint.setStrokeWidth(float width)	//画线条宽度

Paint.setAntiAlias(boolean aa)		//抗锯齿

Paint.setTextSize(float textSize)	//设置文字大小

Paint.setStrokeCap()			//点、线的形状，可配合path、line，point使用，butt平头，round圆头，square方头

-----------------------------------------------------------------------------------

drawColor(@ColorInt int color) 颜色填充

drawCircle(float centerX, float centerY, float radius, Paint paint) 画圆

drawRect(float left, float top, float right, float bottom, Paint paint) 画矩形

drawPoint(float x, float y, Paint paint) 画点

drawText(String text, float x, float y, Paint paint) 绘制文字

drawBitmap(Bitmap bitmap, float left, float top, Paint paint) 画 Bitmap

drawOval(float left, float top, float right, float bottom, Paint paint) 画椭圆

drawLine(float startX, float startY, float stopX, float stopY, Paint paint) 画线

drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint) 画圆角矩形

drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint) 绘制弧形或扇形

drawPath(Path path, Paint paint) 画自定义图形
	Path有两种画法：
			一种是add一个图形，比如上面canvas的圆形，矩形，椭圆等等canvas可以画的形状

				画图形有一个重要的参数Direction dir，该参数是表示顺时针或逆时针画的形状
				如果不使用Path.setFillType()方法设置的话，并没有什么不同，如果设置了，
				就会去计算两个图形相交的地方是否填充颜色
				CW顺时针
				CCW逆时针
				


			另一种是话线，直线，曲线，二次贝塞尔曲线，三次贝塞尔曲线
				path.moveTo()	//移动到某个点
				path.lineTO()	//画一条线，绝对坐标
				path.rLineTo()	//画一条线，使用上一次结束的坐标点作为始点，使用相对坐标
				quadTo()	//画二次贝塞尔线
				rQuadTo()	//画二次贝塞尔线，使用上一次结束的坐标点作为始点，使用相对坐标
				cubicTo()	//画三次贝塞尔线
				rCubicTo()	//画三次贝塞尔线，使用上一次结束的坐标点作为始点，使用相对坐标
				path.arcTo()	//画弧线，最后一个参数表示是否连接上一次结尾坐标画弧线，不连接则跳到弧线起始点画
				path.addArc()   //arcTO()的简化版，默认是跳转到弧线起始点
				paht.close()	//封闭路径
	
	Path辅助计算：
			path.setFillType()
				EVEN_ODD		//奇偶原则，从相交中心点向任意一个方向射出直线，遇到线则+1，最后的结果如果是偶数则不填充，奇数则填充
				WINDING （默认值）	//非零环绕数原则，从相交中心点向任意一个方向射出直线，遇到顺时针+1，逆时针-1，非0填充相交区域，0则不填充
				INVERSE_EVEN_ODD	//EVEN_ODD的相反计算
				INVERSE_WINDING		//WINDING的相反计算

				PS:简单点说，EVEN_ODD就是有交叉的地方都会不填充，而WINDING是根据绘制方向来决定是否填充的，
				   绘制方向在path.addXxx()，最后一个参数可以选择，CW、CWW，如果是相同方向，WINDING则填充，
				   如果是反方向，贼与EVEN_ODD一样，交叉位置不填充

