1、声明
    //声明AMapLocationClient类对象，定位发起端
    private AMapLocationClient mLocationClient = null;
    //声明mLocationOption对象，定位参数
    public AMapLocationClientOption mLocationOption = null;
    //声明mListener对象，定位监听器
    private OnLocationChangedListener mListener = null;
  
2、实例参数类
	 private void location() {
        //初始化定位
        mLocationClient = new AMapLocationClient(getApplicationContext());
        //设置定位回调监听
        mLocationClient.setLocationListener(this);
        //初始化定位参数
        mLocationOption = new AMapLocationClientOption();
        //设置定位模式为Hight_Accuracy高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式
        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
        //设置是否返回地址信息（默认返回地址信息）
        mLocationOption.setNeedAddress(true);
        //设置是否只定位一次,默认为false
        mLocationOption.setOnceLocation(false);
        //设置是否强制刷新WIFI，默认为强制刷新
        mLocationOption.setWifiActiveScan(true);
        //设置是否允许模拟位置,默认为false，不允许模拟位置
        mLocationOption.setMockEnable(false);
        //设置定位间隔,单位毫秒,默认为2000ms
        mLocationOption.setInterval(2000);
        //给定位客户端对象设置定位参数
        mLocationClient.setLocationOption(mLocationOption);
        //启动定位
        mLocationClient.startLocation();
    }

3、实例监听类
	public class LocationListener implements AMapLocationListener {
        @TargetApi(Build.VERSION_CODES.N)
        @Override
        public void onLocationChanged(AMapLocation aMapLocation) {
            if (aMapLocation != null) {
                if (aMapLocation.getErrorCode() == 0) {
                    StringBuilder sb = new StringBuilder();
                //可在其中解析amapLocation获取相应内容。

                    sb.append(aMapLocation.getLocationType()+" = 定位类型，");//获取当前定位结果来源，如网络定位结果，详见定位类型表
                    sb.append(aMapLocation.getLatitude() +" = 获取维度，");//获取纬度
                    sb.append(aMapLocation.getLongitude()+ " = 获取经度，");//获取经度
                    sb.append(aMapLocation.getAccuracy() + " = 获取精度，");//获取精度信息
                    sb.append(aMapLocation.getAddress() + "= 地址，");//地址，如果option中设置isNeedAddress为false，则没有此结果，网络定位结果中会有地址信息，GPS定位不返回地址信息。
                    sb.append(aMapLocation.getCountry() + " = 国家信息，");//国家信息
                    sb.append(aMapLocation.getProvince() + " = 省份，");//省信息
                    sb.append(aMapLocation.getCity() + " = 城市，" );//城市信息
                    sb.append(aMapLocation.getDistrict() + " = 城区，");//城区信息
                    sb.append(aMapLocation.getStreet() + " = 街道，");//街道信息
                    sb.append(aMapLocation.getStreetNum() + " = 门牌号，");//街道门牌号信息
                    sb.append(aMapLocation.getCityCode() + "= 城市编码，");//城市编码
                    sb.append(aMapLocation.getAdCode() + " = 地区编码，");//地区编码
                    sb.append(aMapLocation.getAoiName() + " = AOI，");//获取当前定位点的AOI信息
                    //获取定位时间
                    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    Date date = new Date(aMapLocation.getTime());
                    String time = df.format(date);
                    sb.append(time + " = 时间");
                    text.setText(sb.toString());
                    Log.d("info","+++++++"+sb.toString());
                }else {

                    //定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。
                    Log.e("AmapError","location Error, ErrCode:"
                            + aMapLocation.getErrorCode() + ", errInfo:"
                            + aMapLocation.getErrorInfo());
                }
            }
        }
    }

4、设置定位类
	mLocationClient.setLocationOption(mLocationOption);
	mLocationClient.setLocationListener(mLocationListener);