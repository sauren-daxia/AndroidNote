首先这是两个Activity：

1、第一个Activity有需要做的：
	其实没什么好做的，只需要把搜索条的id设置独特一点，可以识别唯一即可
	然后startActivity();
	但是在startActivity()的时候需要把搜索条的坐标点传到第二个Activity中：

	 Intent intent = new Intent(MainActivity.this,SecondActivity.class);
         int location[] = new int[2];
         mSearchBGTxt.getLocationOnScreen(location);
         intent.putExtra("x",location[0]);
         intent.putExtra("y",location[1]);
         startActivity(intent);
         overridePendingTransition(0,0);		//加了这句话可以关闭掉Activity默认跳转的效果

	PS:因为所有的操作都在第二个Activity中操作

2、第二个Activity：
	首先布局：
	首先需要将第二个Activity的搜索条的位置放置于第一个Activity的搜索条的位置一致，
	这样才可以在点击跳转的时候看到是从点击的位置开始改变到真正的位置。
	其次，如果搜索条左右还有什么小控件之类的，最好使用RelativeLayout或者FrameLayout将小控件放在搜索条下面
	然后跟随搜索条一起移动到正确位置
	最后，将Activity的主题设置为透明，当然，不设置貌似也没什么影响
	<style name="Translucent" parent="Theme.AppCompat.Light.NoActionBar">
		<item name="android:windowBackground">@android:color/transparent</item>
		<item name="android:windowIsTranslucent">true</item>
	</style>

	进入代码：
		先绑定控件，然后在oncreate的时候获取控件的信息
	    mSearchBGTxt.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                mSearchBGTxt.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                performEnterAnimation();	//操作控件移动
            }
        });

	/**
	*	操作移动控件
	*/
	private void performEnterAnimation() {
        float originY = getIntent().getIntExtra("y", 0);	//先获取到第一个Activity搜索条的位置

        int location[] = new int[2];
        mSearchBGTxt.getLocationOnScreen(location);		//再获取当前搜索条的位置

        final float translateY = originY - (float) location[1];	//因为坐标点一样的，得出来等于0

        //放到前一个页面的位置
        mSearchBGTxt.setY(mSearchBGTxt.getY() + translateY);	//因为GetY的坐标点和之前的一样，所以还是设置在相同位置
        mHintTxt.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mHintTxt.getHeight()) / 2);	//设置到正好被搜索条盖住
        mSearchTxt.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mSearchTxt.getHeight()) / 2);	//设置到正好被搜索条盖住

        final ValueAnimator translateVa = ValueAnimator.ofFloat(mSearchBGTxt.getY(), mSearchBGTxt.getY() - 100);	//设置动画，从第一个Activity的搜索条过度到第二个Activity搜索条
        translateVa.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                mSearchBGTxt.setY((Float) valueAnimator.getAnimatedValue());		//不断改变搜索条的位置

		//因为搜索条的位置改变了，所以在它左右的小控件也要跟着改变位置，与它保持直线
                mArrowImg.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mArrowImg.getHeight()) / 2);
                mHintTxt.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mHintTxt.getHeight()) / 2);
                mSearchTxt.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mSearchTxt.getHeight()) / 2);
            }
        });

	//改变搜索条的宽度，与移动同步
        ValueAnimator scaleVa = ValueAnimator.ofFloat(1, 0.8f);
        scaleVa.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                mSearchBGTxt.setScaleX((Float) valueAnimator.getAnimatedValue());
            }
        });

	//改变小控件从无到有的透明度，与移动通读
        ValueAnimator alphaVa = ValueAnimator.ofFloat(0, 1f);
        alphaVa.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                mContentFrame.setAlpha((Float) valueAnimator.getAnimatedValue());
                mSearchTxt.setAlpha((Float) valueAnimator.getAnimatedValue());
                mArrowImg.setAlpha((Float) valueAnimator.getAnimatedValue());
            }
        });

        alphaVa.setDuration(500);
        translateVa.setDuration(500);
        scaleVa.setDuration(500);

        alphaVa.start();
        translateVa.start();
        scaleVa.start();

    }

	离开代码：
		离开的代码就是将进入的动画反过来，不过添加了一个动画监听，动画结束后finish
	    @Override
	    public void onBackPressed() {
		performExitAnimation();
	    }

	    private void performExitAnimation() {
		float originY = getIntent().getIntExtra("y", 0);

		int location[] = new int[2];
		mSearchBGTxt.getLocationOnScreen(location);

		final float translateY = originY - (float) location[1];


		final ValueAnimator translateVa = ValueAnimator.ofFloat(mSearchBGTxt.getY(), mSearchBGTxt.getY() + translateY);
		translateVa.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
		    @Override
		    public void onAnimationUpdate(ValueAnimator valueAnimator) {
			mSearchBGTxt.setY((Float) valueAnimator.getAnimatedValue());
			mArrowImg.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mArrowImg.getHeight()) / 2);
			mHintTxt.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mHintTxt.getHeight()) / 2);
			mSearchTxt.setY(mSearchBGTxt.getY() + (mSearchBGTxt.getHeight() - mSearchTxt.getHeight()) / 2);
		    }
		});
		translateVa.addListener(new Animator.AnimatorListener() {
		    @Override
		    public void onAnimationStart(Animator animator) {

		    }

		    @Override
		    public void onAnimationEnd(Animator animator) {
			finish();
			overridePendingTransition(0, 0);
		    }

		    @Override
		    public void onAnimationCancel(Animator animator) {

		    }

		    @Override
		    public void onAnimationRepeat(Animator animator) {

		    }
		});

		ValueAnimator scaleVa = ValueAnimator.ofFloat(0.8f, 1f);
		scaleVa.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
		    @Override
		    public void onAnimationUpdate(ValueAnimator valueAnimator) {
			mSearchBGTxt.setScaleX((Float) valueAnimator.getAnimatedValue());
		    }
		});

		ValueAnimator alphaVa = ValueAnimator.ofFloat(1, 0f);
		alphaVa.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
		    @Override
		    public void onAnimationUpdate(ValueAnimator valueAnimator) {
			mContentFrame.setAlpha((Float) valueAnimator.getAnimatedValue());

			mArrowImg.setAlpha((Float) valueAnimator.getAnimatedValue());
			mSearchTxt.setAlpha((Float) valueAnimator.getAnimatedValue());
		    }
		});


		alphaVa.setDuration(500);
		translateVa.setDuration(500);
		scaleVa.setDuration(500);

		alphaVa.start();
		translateVa.start();
		scaleVa.start();

	    }
