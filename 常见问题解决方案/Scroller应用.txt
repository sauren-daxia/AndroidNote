ScrollBy和ScrollTo都只是移动控件内容的
ScrollBy() :
	ScrollBy()是累加的移动，需要计算出原点和目标点的每一次移动累加的偏移量。一般用法：

		case MotionEvent.ACTION_DOWN:
			lastX = event.getX();
			lastY = event.getY();
			break;
		case MotionEvent.ACTION_MOVE:
			float offsetX = event.getX() - lastX;
			float offsetY = event.getY() - lastY;
			scrollBy(-(int)offsetX, -(int)offsetY);
			lastX = event.getX();
			lastY = event.getY();
			break;

	PS：常用于点击拖动某个控件

ScrollTo():
	ScrollTo()是一次性移动到某个点的，所以一般只要指定一个点移动就可以，并且是瞬间完成，多次调用就可以实现ScrollBy的移动效果
	一般用法：
		scrollTo(X, Y);
	滑动用法，多次调用scrollTo();
		public void smoothScrollTo(int dstX,int dstY,int duration){
			//getScrollX()	获取的是当前View的左上角的坐标点
			//dstX - getScrollX()计算的是目标X点与控件左上角的X点的距离，然后使用mScroller.startScroll()去计算这个移动的距离
			int dx = dstX - getScrollX();
			int dy = dstY - getScrollY();
			mScroller.startScroll(getScrollX(), getScrollY(), dx, dy, duration);
			invalidate();//刷新，为了触发computeScroll()
		}
		@Override
		public void computeScroll() {		//computeScroll会在控件的位置发生改变的时候调用
			super.computeScroll();
			//调用mScroller.computeScrollOffset()方法会计算下一个目标位置
			if(!mScroller.isFinished() && mScroller.computeScrollOffset()){
				
				//getCurrX()是获取下一个目标位置的X值，
				int scrollX = mScroller.getCurrX();
				int scrollY = mScroller.getCurrY();
				//通过scrollTo(),不断的去移动到下一个目标位置，实现移动的效果，不至于瞬间就到目标位置
				scrollTo(scrollX, scrollY);
				invalidate();	//每次调用都会触发computeScroll()，这样就可以不断的去获取下一个目标值和移动
			}
		}
	PS:常用于松手让控件移动到原位

