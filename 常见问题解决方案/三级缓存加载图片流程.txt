1、定义一个 static final 储存图片的文件夹路径变量

2、定义一个图片缓存对象，以网址为键，bitmap为值的变量
	LruCache<String,Bitmap> lru;

3、定义一个线程池，免于图片不存在每次都新建线程去下载

	ExecutorService es = Executors.newFixedThreadPool(5);
4、在构造初始化图片缓存对象，并设置缓存的容量

	int maxSize = (int)(Runtime.getRuntime().maxMemort / 8);	//使用该APP的最大缓存的八分之一

	lru = new LruCache<String,Bitmap>(maxSize){
	
		void sizeOf(String key,Bitmap value){
		
			if(Build.VERSION.SKD_INT >= Build.VERSUIB_CODES.HONEYCOMB_MR1){		//判断系统
				return value.getByteCount();	//计算Bitmap的大小，便与计算可以缓存多少张，该方法用于andoird.12版本后使用
			}

		}	
	}

5、提供一个方法设置imageview的图像，先判断URL和imageView的tag是否一致吗，如果不一致则return，一致则通过Context.runOnUiThread异步线程更新空间

	if(imageview.tag() != urlString){return}

	Activity ac = imageview.getContext()		//通过控件可以获取到它所在的Activity的对象

	ac.runOnUiThread(new Runnable){
		run(){
			imageview.setimageBitmap(bitmap)
		}
	}

	


6、提供一个public 方法获取存储在缓存对象里的Bitmap，判断是否获取空，如果是空则使用三级缓存规则向上获取，并设置ImageView对应的tag用于对应每一张图片
	
	imageview.settag(urlString)		//用网址设置为tag确定该空间对应的Bitmap的唯一性
	
	Bitmap b = lru.get(urlString)		//用网址获取缓存对象里的Bitmap

	if(b != null){ setImg(ImageView,b) return;}		//如果获取成功则跳转到第5步给imagview设置Bitmap

	MyRunnable mr = new Runnable(ImageView,urlString);	//如果Bitmap获取为空则创建自定义的线程对象去获取本地，或则网络的图片

	es.execute(mr)	//用线程池启动线程任务

7、提供一个内部类实现runnbale，在run方法里执行从本地获取或从网络获取的耗时操作

	private ImageView,urlString

	run(){
		
		Bitmap b = getBitmapFromLocal(urlString)	//跳转到第8步，先尝试去本地获取图片

		if(b!=null){ setImg(ImageView,b) return;}		//如果本地有，则调到第5步设置图片
	
		b = getBimapFromNet(urlString)			//如果本地获取不到，跳转到第9步，再尝试去网络获取

		if(b!=null){ setImg(ImageView,b) return;}	//如果网络有，则条到第5步设置图片

		return ;		//如果三级缓存都获取不到，按需求返回
		
	}

8、提供一个方法获取本地文件

	File file = new File(xx ,MD5.xx(urlString))		//通过存储地址 + MD5码加密后的url生成File对象

	Bitmap b = BitmapFactory.decodeFile(file)

	if(b!=null) {lru.put(file.getPath()); }	//判断Bitmap是否存在，存在则添加到缓存对象中

	return b;		//返回对象

9、提供一个方法获取网络文件

	File file = new File(xx,MD5.xx(urlString))		//通过存储地址 + MD5码加密后的url生成File对象

	FileUtil.downloadFile(urlString,file)			//通过文件下载工具类下载图片

	return getBitmapFromLocal(urlString)			//把下载好的文件提取出来，网络文件下载完毕之后，还需要从本地提取才行
	

	