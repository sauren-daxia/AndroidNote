1、定义一个静态路径变量
	String LOCATION

2、定义一个图片缓存对象
	LruCache<String,Bitmap>

3、定义一个内部接口类用于回调
	ImageListener il;

4、定义一个线程池
	ExecutorService es = Executors.newFixedThreadPool(5)

4、初始化变量

	this.il = il

	int maxSize = (int)(Runtime.getRuntime().maxMemory() / 8)

	lru = new LruCache<String,Bitmap>(maxSize){
		sizeOf(){
			if(Build.VERSION.SDK_INT < 12){
					return value.getRowBytes()*value.getHeight();
				}
				return value.getByteCount();
		
		}
	}

5、提供方法传用于图片的获取

		imgageView.setTag(imgUrl);
		Bitmap bitmap = lru.get(imgUrl);
		if(bitmap != null){
			callBack(bitmap,imgageView,imgUrl);
			return;
		}
		GetBitmapTask task = new GetBitmapTask(imgageView, imgUrl);
		mExecutor.execute(task);

6、提供方法用于回调
	if(!imgUrl.equals(imgageView.getTag())){
			return;
		}
		if(listener != null){
			Activity aty = (Activity) imgageView.getContext();
			aty.runOnUiThread(new Runnable() {

				@Override
				public void run() {
					listener.success(bitmap, imgageView, imgUrl);
				}
			});

7、定义接口

	public interface ImageLoaderListener{
		void success(Bitmap bitmap,ImageView img,String imgStr);
	}

8、定义线程任务

	public void run() {
			Bitmap bitmap = getBitmapFromLocal(imgUrl);
			if(bitmap != null){
				callBack(bitmap, imageView, imgUrl);
				return;
			}
			bitmap = getBitmapFromNetwork(imgUrl);
			if(bitmap != null){
				callBack(bitmap, imageView, imgUrl);
			}
		}
		}

9、获取本地图片

	File file = new File(PIC_SAVE_PATH, MD5.encrypt(imgUrl));
		if(!file.exists()){
			return null;
		}
		Bitmap bitmap = BitmapFactory.decodeFile(file.getPath());
		if(bitmap != null){
			mCache.put(imgUrl, bitmap);
		}else{
			Log.d("MyAdapter", "bitamp--->:"+bitmap+","+imgUrl);
		}
		return bitmap;

10、获取网络图片

	public Bitmap getBitmapFromNetwork(String imgUrl) {
		File file = new File(PIC_SAVE_PATH, MD5.encrypt(imgUrl));
		FileUtil.downloadFile(imgUrl, file);
		return getBitmapFromLocal(imgUrl);
	}