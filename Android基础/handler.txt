构造
--------------------


Message构造：
-----------------------------
Message message = new Message()

Message message = Message.obtain()		//优先从消息池里获取消息，如果没有则新建消息，推荐


创建：
	UIThread创建第一个Handler对象的时候会通过ThreadLocal创建一个Looper对象，这个Looper对象会与主线程绑定。
	而在Looper创建的时候，内部会创建一个MessageQueue消息队列，使用ThreadLocal的目的是保证每一个线程只创建唯一一个Looper。
	ThreadLocal通过get() == null  set()方法来保证只创建一个Looper对象的

发送：
	Handler发送消息的时候会去消息池里面查找，有没有该消息的对象，如果有则使用，如果没有则创建一个Message
	Message在使用完毕后并没有被回收，而是又回到了消息池里面，提高系统资源利用。每个MessageQueue只能存储一个Message对象，
	在使用完毕后回到消息池里时会对Message进行初始化。这个前提是创建Message时不是new，而是使用Message.obtain()方法

处理：
	Looper会不断的从MessageQueue里抽出消息，如果有消息的话就发给对应的Handler去处理消息。
	Message会通过内部的getTarget()方法找到对应的Handler引用去处理，getTarget()方法存着一个Handler的引用。

子线程创建Handler：
	子线程创建的Handler并不能直接更新UI，因为该Handler绑定的Looper并不是主线程的；
	想要在子线程创建的Handler也能更新UI的话，有两种方法：
	第一种：在构造的时候引用主线程的Looper
	Handler handler = new Handler(Looper.getMainLoop());

	第二种是：调用Looper.perpaer()
	Hnaderl hanlder = new Hanlder();
	Loop.perpaer();		//
	Loop.loop();		//启动轮询工作

Handler内存泄漏
	在Activity里面创建的Handler，会持有Activity的引用，而Handler有一个耗时的后台线程工作，这个线程持有Handler的引用，
	该线程去访问图片啊什么的，下载完毕后通知Handler更新UI。然后，如果用户在访问的时候关闭了Activity，但线程还未执行完毕，
	线程持有的Handler引用就不能回收，而Handler持有的Activity引用也不能回收，就导致内存泄漏的问题。

	解决方法：定义一个静态的Handler类，并获取Activity的弱引用，弱引用会在不使用的时候会被回收；
	static class MyHandler extends Handler {
	WeakReference<Activity > mActivityReference;

	 MyHandler(Activity activity) {
	    mActivityReference= new WeakReference<Activity>(activity);
	}

	 @Override
	 public void handleMessage(Message msg) {
	    final Activity activity = mActivityReference.get();
	   if (activity != null) {
		    mImageView.setImageBitmap(mBitmap);
		}
	}
	}

	